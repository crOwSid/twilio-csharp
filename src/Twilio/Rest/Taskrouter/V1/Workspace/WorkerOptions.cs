/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Taskrouter.V1.Workspace 
{

    /// <summary>
    /// ReadWorkerOptions
    /// </summary>
    public class ReadWorkerOptions : ReadOptions<WorkerResource> 
    {
        /// <summary>
        /// The workspace_sid
        /// </summary>
        public string PathWorkspaceSid { get; }
        /// <summary>
        /// Filter by workers that are in a particular Activity by Friendly Name
        /// </summary>
        public string ActivityName { get; set; }
        /// <summary>
        /// Filter by workers that are in a particular Activity by SID
        /// </summary>
        public string ActivitySid { get; set; }
        /// <summary>
        /// Filter by workers that are available or unavailable.
        /// </summary>
        public string Available { get; set; }
        /// <summary>
        /// Filter by a worker's friendly name
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// Filter by workers that would match an expression on a TaskQueue.
        /// </summary>
        public string TargetWorkersExpression { get; set; }
        /// <summary>
        /// Filter by workers that are eligible for a TaskQueue by Friendly Name
        /// </summary>
        public string TaskQueueName { get; set; }
        /// <summary>
        /// Filter by workers that are eligible for a TaskQueue by SID
        /// </summary>
        public string TaskQueueSid { get; set; }

        /// <summary>
        /// Construct a new ReadWorkerOptions
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        public ReadWorkerOptions(string pathWorkspaceSid)
        {
            PathWorkspaceSid = pathWorkspaceSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (ActivityName != null)
            {
                p.Add(new KeyValuePair<string, string>("ActivityName", ActivityName));
            }

            if (ActivitySid != null)
            {
                p.Add(new KeyValuePair<string, string>("ActivitySid", ActivitySid.ToString()));
            }

            if (Available != null)
            {
                p.Add(new KeyValuePair<string, string>("Available", Available));
            }

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (TargetWorkersExpression != null)
            {
                p.Add(new KeyValuePair<string, string>("TargetWorkersExpression", TargetWorkersExpression));
            }

            if (TaskQueueName != null)
            {
                p.Add(new KeyValuePair<string, string>("TaskQueueName", TaskQueueName));
            }

            if (TaskQueueSid != null)
            {
                p.Add(new KeyValuePair<string, string>("TaskQueueSid", TaskQueueSid.ToString()));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// CreateWorkerOptions
    /// </summary>
    public class CreateWorkerOptions : IOptions<WorkerResource> 
    {
        /// <summary>
        /// The workspace_sid
        /// </summary>
        public string PathWorkspaceSid { get; }
        /// <summary>
        /// String representing user-friendly name for the Worker.
        /// </summary>
        public string FriendlyName { get; }
        /// <summary>
        /// A valid Activity describing the worker's initial state.
        /// </summary>
        public string ActivitySid { get; set; }
        /// <summary>
        /// JSON object describing this worker.
        /// </summary>
        public string Attributes { get; set; }

        /// <summary>
        /// Construct a new CreateWorkerOptions
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="friendlyName"> String representing user-friendly name for the Worker. </param>
        public CreateWorkerOptions(string pathWorkspaceSid, string friendlyName)
        {
            PathWorkspaceSid = pathWorkspaceSid;
            FriendlyName = friendlyName;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (ActivitySid != null)
            {
                p.Add(new KeyValuePair<string, string>("ActivitySid", ActivitySid.ToString()));
            }

            if (Attributes != null)
            {
                p.Add(new KeyValuePair<string, string>("Attributes", Attributes));
            }

            return p;
        }
    }

    /// <summary>
    /// FetchWorkerOptions
    /// </summary>
    public class FetchWorkerOptions : IOptions<WorkerResource> 
    {
        /// <summary>
        /// The workspace_sid
        /// </summary>
        public string PathWorkspaceSid { get; }
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchWorkerOptions
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathSid"> The sid </param>
        public FetchWorkerOptions(string pathWorkspaceSid, string pathSid)
        {
            PathWorkspaceSid = pathWorkspaceSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// UpdateWorkerOptions
    /// </summary>
    public class UpdateWorkerOptions : IOptions<WorkerResource> 
    {
        /// <summary>
        /// The workspace_sid
        /// </summary>
        public string PathWorkspaceSid { get; }
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// The activity_sid
        /// </summary>
        public string ActivitySid { get; set; }
        /// <summary>
        /// The attributes
        /// </summary>
        public string Attributes { get; set; }
        /// <summary>
        /// The friendly_name
        /// </summary>
        public string FriendlyName { get; set; }

        /// <summary>
        /// Construct a new UpdateWorkerOptions
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathSid"> The sid </param>
        public UpdateWorkerOptions(string pathWorkspaceSid, string pathSid)
        {
            PathWorkspaceSid = pathWorkspaceSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (ActivitySid != null)
            {
                p.Add(new KeyValuePair<string, string>("ActivitySid", ActivitySid.ToString()));
            }

            if (Attributes != null)
            {
                p.Add(new KeyValuePair<string, string>("Attributes", Attributes));
            }

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            return p;
        }
    }

    /// <summary>
    /// DeleteWorkerOptions
    /// </summary>
    public class DeleteWorkerOptions : IOptions<WorkerResource> 
    {
        /// <summary>
        /// The workspace_sid
        /// </summary>
        public string PathWorkspaceSid { get; }
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteWorkerOptions
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathSid"> The sid </param>
        public DeleteWorkerOptions(string pathWorkspaceSid, string pathSid)
        {
            PathWorkspaceSid = pathWorkspaceSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}